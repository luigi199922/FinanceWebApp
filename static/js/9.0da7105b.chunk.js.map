{"version":3,"sources":["components/InfoCard/InfoCard.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","assets/images/covid.png","containers/COVID/COVID.module.css","components/InfoCard/InfoCard.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.js","containers/COVID/COVID.js","api/index.js"],"names":["module","exports","InfoCard","data","confirmed","recovered","deaths","lastUpdate","className","classes","Container","Grid","container","spacing","CardContainer","item","xs","component","Card","cx","Infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","Recovered","Deaths","Chart","country","useState","dailyData","setDailyData","useEffect","a","fetchDailyData","fetchAPI","lineChart","length","labels","map","date","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","fetchCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","COVID","state","fetchData","fetchedData","setState","this","Image","src","VirusImage","alt","Component","url","flexUrl","axios","get","console","log","fetchEconomicData","replace","modifiedData","unshift","total","reportDate","countries","name"],"mappings":"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","file":"static/js/9.0da7105b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"InfoCard_Container__2gimu\",\"Card\":\"InfoCard_Card__23h69\",\"Infected\":\"InfoCard_Infected__XiavK\",\"Recovered\":\"InfoCard_Recovered__3jS22\",\"Deaths\":\"InfoCard_Deaths__tCPtv\",\"CardContainer\":\"InfoCard_CardContainer__2bN0c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Chart_Container__2--Cp\",\"Chart\":\"Chart_Chart__2W4hD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2p8f9\"};","module.exports = __webpack_public_path__ + \"static/media/covid.1f77e957.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"COVID_Container__3Wl_r\",\"Image\":\"COVID_Image__1KTjP\"};","import React from \"react\";\nimport classes from \"./InfoCard.module.css\";\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\nimport CountUp from \"react-countup\";\nimport cx from \"classnames\";\nconst InfoCard = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\n  if (!confirmed) {\n    return \"Loading....\";\n  }\n  return (\n    <div className={classes.Container}>\n      <Grid\n        container\n        spacing={1}\n        className={classes.CardContainer}\n      >\n        <Grid\n          container\n          item\n          xs={12}\n          spacing={3}\n          component={Card}\n          className={cx(classes.Card, classes.Infected)}\n        >\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>\n              Infected\n            </Typography>\n            <Typography variant=\"h5\">\n              <CountUp\n                start={0}\n                end={confirmed.value}\n                duration={2.5}\n                separator=\",\"\n              />\n            </Typography>\n            <Typography color=\"textSecondary\">\n              {new Date(lastUpdate).toDateString()}\n            </Typography>\n            <Typography variant=\"body2\">\n              Number of Active Cases of COVID-19\n            </Typography>\n          </CardContent>\n        </Grid>\n        <Grid\n          container\n          item\n          xs={12}\n          spacing={3}\n          component={Card}\n          className={cx(classes.Card, classes.Recovered)}\n        >\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>\n              Recovered\n            </Typography>\n            <Typography variant=\"h5\">\n              <CountUp\n                start={0}\n                end={recovered.value}\n                duration={2.5}\n                separator=\",\"\n              />\n            </Typography>\n            <Typography color=\"textSecondary\">\n              {new Date(lastUpdate).toDateString()}\n            </Typography>\n            <Typography variant=\"body2\">\n              Number of Recoveries from COVID-19\n            </Typography>\n          </CardContent>\n        </Grid>\n        <Grid\n          container\n          item\n          xs={12}\n          spacing={3}\n          component={Card}\n          className={cx(classes.Card, classes.Deaths)}\n        >\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>\n              Deaths\n            </Typography>\n            <Typography variant=\"h5\">\n              <CountUp\n                start={0}\n                end={deaths.value}\n                duration={2.5}\n                separator=\",\"\n              />\n            </Typography>\n            <Typography color=\"textSecondary\">\n              {new Date(lastUpdate).toDateString()}\n            </Typography>\n            <Typography variant=\"body2\">\n              Number of Deaths from COVID-19\n            </Typography>\n          </CardContent>\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\nexport default InfoCard;\n","import React, { useState , useEffect} from 'react'\nimport { fetchDailyData} from '../../api'\nimport { Line, Bar} from 'react-chartjs-2'\nimport classes from './Chart.module.css'\n\nconst Chart = ({data : {confirmed, deaths, recovered}, country}) => {\n    const [ dailyData, setDailyData] = useState([])\n\n    useEffect(()=> {\n        const fetchAPI = async () => {\n            setDailyData(await fetchDailyData())\n        }\n        fetchAPI()\n    },[])\n    \n    const lineChart = (\n        dailyData.length ? (\n            <Line \n            data={{\n                labels: dailyData.map(({date }) => date),\n                datasets: [{\n                    data: dailyData.map((({confirmed}) => confirmed)),\n                    label: 'Infected',\n                    borderColor: '#3333ff',\n                    fill: true,\n                }, {\n                    data: dailyData.map((({deaths}) => deaths)),\n                    label: 'Deaths',\n                    borderColor: 'red',\n                    backgroundColor: 'rgba(255,0,0,0.5',\n                    fill: true,\n                }],\n            }}\n        />\n        ) : \n        null\n        \n    )\n\n    const barChart = (\n        confirmed ? (\n            <Bar data={{\n                labels: ['Infected' , 'Recovered', 'Deaths'],\n                datasets: [\n                    {\n                        label:'People',\n                        backgroundColor: [\n                            \"rgba(0,0,255,0.5)\",\n                            \"rgba(0,255,0,0.5)\",\n                            \"rgba(255,0,0,0.5)\"\n                        ],\n                        data: [\n                            confirmed.value,\n                            recovered.value,\n                            deaths.value,\n                        ]\n                    }\n                ]\n                \n            }} options={{legend: {display : false}, title:{display: true , text: `Current State in ${country}`}}}/>\n        ) :  null\n    )\n\n    return (\n        <div className={classes.Container}>\n            <div className={classes.Chart}>\n\n            \n            { country ? barChart : lineChart}\n            </div>\n        </div>\n    )\n}\nexport default Chart","import React, {useState, useEffect} from 'react'\nimport { NativeSelect, FormControl} from '@material-ui/core'\nimport classes from './CountryPicker.module.css'\nimport {fetchCountries } from '../../api'\n\nconst CountryPicker = ({handleCountryChange}) => {\n    const [fetchedCountries, setFetchedCountries] = useState([])\n    \n    useEffect(() => {\n        const fetchAPI = async () => {\n            setFetchedCountries(await fetchCountries())\n        }\n        fetchAPI()\n    }, [setFetchedCountries])\n\n    return (\n        <FormControl className={classes.formControl}>\n            <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)}>\n                <option value=\"\">Global</option>\n                {fetchedCountries.map((country, i) => <option key={i} value={country}>{country}</option>)}\n            </NativeSelect>\n        </FormControl>\n    )\n}\nexport default CountryPicker","import React, { Component } from \"react\";\nimport InfoCard from \"../../components/InfoCard/InfoCard\";\nimport {fetchData} from '../../api'\nimport Chart from '../../components/Chart/Chart'\nimport CountryPicker from '../../components/CountryPicker/CountryPicker'\nimport VirusImage from '../../assets/images/covid.png'\nimport classes from './COVID.module.css'\nclass COVID extends Component {\n\n  state = {\n    data: {},\n    country: \"\"\n  };\n\n  async componentDidMount() {\n    const fetchedData = await fetchData();\n      this.setState({\n          data: fetchedData\n      })\n\n  }\n\n  handleCountryChange = async (country) => {\n    const fetchedData = await fetchData(country)\n    this.setState({data : fetchedData, country: country})\n  }\n\n  render() {\n      const { data } = this.state\n    return (\n      <div className={classes.Container}>\n        <h1>C<img className={classes.Image} src={VirusImage} alt=\"COVID-19\"></img>VID-19</h1>\n        <InfoCard data={data} />\n        <CountryPicker handleCountryChange={this.handleCountryChange}/>\n        <Chart data={data} country={this.state.country}></Chart>\n      </div>\n    );\n  }\n}\nexport default COVID;\n","import axios from \"axios\";\nimport HashTable from \"../shared/hashTable\";\nconst url = \"https://covid19.mathdro.id/api\";\nconst econDataUrl =\n  \"https://finnhub.io/api/v1/economic?code=MA-XXX-678073&token=boqata7rh5rfjhndqf1g\";\n\nexport const fetchData = async (country) => {\n  let flexUrl = url;\n\n  if (country) {\n    flexUrl = url + \"/countries/\" + country;\n  }\n\n  try {\n    const {\n      data: { confirmed, recovered, deaths, lastUpdate },\n    } = await axios.get(flexUrl);\n    return { confirmed, recovered, deaths, lastUpdate };\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst formatUrl = (countryCode) => {\n  return econDataUrl.replace(\"XXX\", countryCode);\n};\n\nexport const fetchEconomicData = async (country) => {\n  try {\n    const { data } = await axios.get(formatUrl(country));\n    const modifiedData = [];\n    data.map((dailyData) => {\n      modifiedData.unshift({ date: dailyData[0], value: dailyData[1] });\n    });\n    return modifiedData;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchDailyCountries = async () => {\n  const economicCodesUrl =\n    \"https://finnhub.io/api/v1/economic/code?token=boqata7rh5rfjhndqf1g\";\n  const { data } = await axios.get(economicCodesUrl);\n  const countries = new HashTable();\n  const economicCodes = new HashTable();\n  data.forEach(async (item) => {\n    console.log(item);\n    if (countries.getItem(item.country) === null) {\n      const code = item.code.slice(3, 6);\n      await countries.setItem(item.country, code);\n    }\n    // if (economicCodes.getItem(item.name) == null) {\n    //   const code = item.code.slice(7);\n    //   economicCodes.setItem(item.name, code);\n    // }\n  });\n\n  return countries;\n};\n\nexport const fetchDailyData = async () => {\n  try {\n    const { data } = await axios.get(url + \"/daily\");\n    const modifiedData = data.map((dailyData) => ({\n      confirmed: dailyData.confirmed.total,\n      deaths: dailyData.deaths.total,\n      date: dailyData.reportDate,\n    }));\n    return modifiedData;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchCountries = async () => {\n  try {\n    const {\n      data: { countries },\n    } = await axios.get(url + \"/countries\");\n    return countries.map((country) => country.name);\n  } catch (error) {\n    console.log(error);\n  }\n};\n"],"sourceRoot":""}