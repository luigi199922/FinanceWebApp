{"version":3,"sources":["containers/Economic/Economic.jsx","api/index.js"],"names":["Economic","useState","dailyData","setDailyData","countryCode","countries","useEffect","a","fetchEconomicData","fetchAPIData","console","log","lineChart","length","data","labels","map","date","datasets","value","label","borderColor","fill","url","fetchData","country","flexUrl","axios","get","confirmed","recovered","deaths","lastUpdate","replace","modifiedData","unshift","fetchDailyData","total","reportDate","fetchCountries","name"],"mappings":"gMA+CeA,UA3CE,WAAO,IAAD,EACgBC,mBAAS,IADzB,mBACXC,EADW,KACAC,EADA,OAEoBF,mBAAS,OAF7B,mBAEXG,EAFW,aAGeH,sBAHf,mBAGZI,EAHY,UAInBC,qBAAU,YACY,uCAAG,sBAAAC,EAAA,kEACjBJ,EADiB,SACEK,YAAkBJ,GADpB,6EAAH,qDAGlBK,KAMF,IACCJ,GACCK,QAAQC,IAAIN,GAEhB,IAAMO,EACFV,EAAUW,OACN,kBAAC,IAAD,CACAC,KAAM,CACFC,OAAQb,EAAUc,KAAI,qBAAEC,QACxBC,SAAU,CAAC,CACPJ,KAAMZ,EAAUc,KAAK,qBAAEG,SACvBC,MAAO,QACPC,YAAa,UACbC,MAAM,OAKlB,KAIJ,OACI,yEAEKV,K,kOCzCb,IAAMW,EAAM,iCAICC,EAAS,uCAAG,WAAOC,GAAP,2BAAAlB,EAAA,6DACnBmB,EAAUH,EAEVE,IACFC,EAAUH,EAAM,cAAgBE,GAJX,kBAUXE,IAAMC,IAAIF,GAVC,2BASnBZ,KAAQe,EATW,EASXA,UAAWC,EATA,EASAA,UAAWC,EATX,EASWA,OAAQC,EATnB,EASmBA,WATnB,kBAWd,CAAEH,YAAWC,YAAWC,SAAQC,eAXlB,kCAarBtB,QAAQC,IAAR,MAbqB,0DAAH,sDAqBTH,EAAiB,uCAAG,WAAOiB,GAAP,mBAAAlB,EAAA,+EAENoB,IAAMC,IAzB/B,mFAoBmBK,QAAQ,MAKkBR,IAFd,uBAErBX,EAFqB,EAErBA,KACFoB,EAAe,GACrBpB,EAAKE,KAAI,SAACd,GACRgC,EAAaC,QAAQ,CAAElB,KAAMf,EAAU,GAAIiB,MAAOjB,EAAU,QALjC,kBAOtBgC,GAPsB,kCAS7BxB,QAAQC,IAAR,MAT6B,0DAAH,sDAkCjByB,EAAc,uCAAG,gCAAA7B,EAAA,+EAEHoB,IAAMC,IAAIL,EAAM,UAFb,uBAElBT,EAFkB,EAElBA,KACFoB,EAAepB,EAAKE,KAAI,SAACd,GAAD,MAAgB,CAC5C2B,UAAW3B,EAAU2B,UAAUQ,MAC/BN,OAAQ7B,EAAU6B,OAAOM,MACzBpB,KAAMf,EAAUoC,eANQ,kBAQnBJ,GARmB,gCAU1BxB,QAAQC,IAAR,MAV0B,yDAAH,qDAcd4B,EAAc,uCAAG,8BAAAhC,EAAA,+EAIhBoB,IAAMC,IAAIL,EAAM,cAJA,uBAGhBlB,EAHgB,EAGxBS,KAAQT,UAHgB,kBAKnBA,EAAUW,KAAI,SAACS,GAAD,OAAaA,EAAQe,SALhB,gCAO1B9B,QAAQC,IAAR,MAP0B,yDAAH","file":"static/js/11.fa719a79.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport {fetchEconomicData, fetchDailyCountries} from '../../api/'\nimport { Line } from 'react-chartjs-2'\n\nconst Economic = () => {\n    const [ dailyData, setDailyData] = useState([])\n    const [ countryCode, setCountryCode] = useState(\"USA\")\n    const [countries, setCountries] = useState()\n    useEffect(()=> {\n        const fetchAPIData = async() => {\n            setDailyData(await fetchEconomicData(countryCode))\n        }\n        fetchAPIData() \n        // const getCountries = async() => {\n        //     setCountries(await fetchDailyCountries())\n        // }\n        // getCountries()\n        \n    },[])\n    if(countries){\n        console.log(countries)\n    }\n    const lineChart = (\n        dailyData.length ? (\n            <Line \n            data={{\n                labels: dailyData.map(({date }) => date),\n                datasets: [{\n                    data: dailyData.map((({value}) => value)),\n                    label: 'Value',\n                    borderColor: '#3333ff',\n                    fill: true,\n                }]\n            }}\n        />\n        ) : \n        null\n        \n    )\n    \n    return(\n        <div>\n            Economic Data : USA ADP EMPLOYMENT CHANGE\n            {lineChart}\n        </div>\n    )\n}\nexport default Economic","import axios from \"axios\";\nimport HashTable from \"../shared/hashTable\";\nconst url = \"https://covid19.mathdro.id/api\";\nconst econDataUrl =\n  \"https://finnhub.io/api/v1/economic?code=MA-XXX-678073&token=boqata7rh5rfjhndqf1g\";\n\nexport const fetchData = async (country) => {\n  let flexUrl = url;\n\n  if (country) {\n    flexUrl = url + \"/countries/\" + country;\n  }\n\n  try {\n    const {\n      data: { confirmed, recovered, deaths, lastUpdate },\n    } = await axios.get(flexUrl);\n    return { confirmed, recovered, deaths, lastUpdate };\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst formatUrl = (countryCode) => {\n  return econDataUrl.replace(\"XXX\", countryCode);\n};\n\nexport const fetchEconomicData = async (country) => {\n  try {\n    const { data } = await axios.get(formatUrl(country));\n    const modifiedData = [];\n    data.map((dailyData) => {\n      modifiedData.unshift({ date: dailyData[0], value: dailyData[1] });\n    });\n    return modifiedData;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchDailyCountries = async () => {\n  const economicCodesUrl =\n    \"https://finnhub.io/api/v1/economic/code?token=boqata7rh5rfjhndqf1g\";\n  const { data } = await axios.get(economicCodesUrl);\n  const countries = new HashTable();\n  const economicCodes = new HashTable();\n  data.forEach(async (item) => {\n    console.log(item);\n    if (countries.getItem(item.country) === null) {\n      const code = item.code.slice(3, 6);\n      await countries.setItem(item.country, code);\n    }\n    // if (economicCodes.getItem(item.name) == null) {\n    //   const code = item.code.slice(7);\n    //   economicCodes.setItem(item.name, code);\n    // }\n  });\n\n  return countries;\n};\n\nexport const fetchDailyData = async () => {\n  try {\n    const { data } = await axios.get(url + \"/daily\");\n    const modifiedData = data.map((dailyData) => ({\n      confirmed: dailyData.confirmed.total,\n      deaths: dailyData.deaths.total,\n      date: dailyData.reportDate,\n    }));\n    return modifiedData;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchCountries = async () => {\n  try {\n    const {\n      data: { countries },\n    } = await axios.get(url + \"/countries\");\n    return countries.map((country) => country.name);\n  } catch (error) {\n    console.log(error);\n  }\n};\n"],"sourceRoot":""}